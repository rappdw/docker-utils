#!/usr/bin/env python3
# script that codifies virtual environment conventions,
#   - virtual environment is placed in ~/.venvs/<project_name>
#   - symbolic link created in project root root directory to activate
#   - if python 3.6 or above, use project name as the prompt

import os
import venv
import sys
import argparse
from pathlib import Path

def get_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('-s', '--system-site-packages', dest='system_site_packages', default=False, action='store_true',
                        help='Make system site packages available to virtual environment')
    parser.add_argument('-c', '--clear', dest='clear', default=False, action='store_true',
                        help='erases contents of destination directory if present before creating virtual environment')
    parser.add_argument('-o', '--original-style', dest='original_style', default=False, action='store_true',
                        help='Continue to do things the old-fashioned way ;)')

    return parser.parse_args()


def main(args):
    __, file = os.path.split(os.getcwd())
    if args.original_style:
        env_path = os.path.join(os.getcwd(), '.venv')
    else:
        # rather than project directory, place the virtual environment in ~/.venvs/<project>
        home = str(Path.home())
        venv_dir = os.path.join(home, '.venvs')
        if not os.path.exists(venv_dir):
            os.makedirs(venv_dir)
        env_path = os.path.join(venv_dir, file)

    if sys.version_info >= (3, 6):
        env_builder = venv.EnvBuilder(clear=args.clear, prompt=file, with_pip=True,
                                      system_site_packages=args.system_site_packages)
    else:
        print("********************** WARNING **********************")
        print("Your Python interpreter is too old. Please consider upgrading to 3.6+.")
        print(sys.version_info)
        print("*****************************************************")
        env_builder = venv.EnvBuilder(clear=args.clear, with_pip=True, system_site_packages=args.system_site_packages)

    env_builder.create(env_path)

    activate_rel_path = os.path.join(env_path, 'bin', 'activate')

    symlink_path = os.path.join(os.getcwd(), 'activate')

    if os.path.exists(symlink_path):
        if args.clear:
            os.remove(symlink_path)
            os.symlink(activate_rel_path, symlink_path)
        else:
            print('symlink: {} already exists'.format(symlink_path))
    else:
        os.symlink(activate_rel_path, symlink_path)


if __name__ == "__main__":
    args = get_args()
    main(args)

